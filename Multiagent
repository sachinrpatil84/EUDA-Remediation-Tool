Great! You're aiming for conditional task execution in CrewAI based on the user's query intent, such as:

Metadata-only queries → Run agent_metadata task only.

Technical-only queries → Run agent_technical task only.

General queries → Run both and summarize.

Code generation queries (Python/Java) → Run technical + pass to software_engineer_agent.


This level of orchestration requires intent detection first — and you can achieve this in CrewAI via:

✅  Strategy Overview

1. Intent Detection Agent – analyzes the user query and determines which path to take: metadata, technical, both, or code.


2. Depending on the intent, spawn the appropriate agents and tasks.


3. Optionally use a LangChain tool or simple keyword matching to determine intent inside the agent.




---

✅  1. Define Intent Detection Agent

from crewai import Agent

intent_agent = Agent(
    role="Intent Classifier",
    goal="Understand the user's query and classify it as metadata, technical, both, or code generation.",
    backstory="An expert at classifying user requests to direct them to appropriate EUDA analysis agents.",
    tools=[],
    allow_delegation=False
)


---

✅  2. Intent Detection Task

from crewai import Task

task_intent = Task(
    description=(
        "Classify the user query into one of the following categories:\n"
        "- 'metadata' if it's asking about ownership, department, purpose, etc.\n"
        "- 'technical' if it's about macros, formulas, complexity.\n"
        "- 'both' if it needs metadata and technical info.\n"
        "- 'code' if it's asking to generate code (Python, Java, etc.) based on technical details.\n\n"
        "Respond with ONLY the category name."
    ),
    agent=intent_agent,
    expected_output="One of: metadata, technical, both, or code."
)


---

✅  3. Existing Agents

(As defined previously)

agent_metadata = Agent(
    role="EUDA Metadata Expert",
    goal="Search and retrieve metadata details.",
    tools=[search_metadata_tool],
    allow_delegation=False
)

agent_technical = Agent(
    role="EUDA Technical Analyst",
    goal="Search and retrieve technical details.",
    tools=[search_technical_tool],
    allow_delegation=False
)

agent_summarizer = Agent(
    role="EUDA Summarizer",
    goal="Combine metadata and technical information into a report.",
    tools=[],
    allow_delegation=False
)


---

✅  4. Software Engineer Agent

software_engineer_agent = Agent(
    role="Software Engineer",
    goal="Generate code in Python or Java based on the technical structure of the EUDA.",
    backstory="Skilled in creating automation scripts, integration code, or replacements for Excel logic.",
    tools=[],
    allow_delegation=False
)


---

✅  5. Dynamic Task Routing Logic (Pseudo-Code)

You can't dynamically change tasks inside CrewAI Crew block directly, but you can run this logic in your Python control script:

from crewai import Crew

# Step 1: Run intent detection
intent_crew = Crew(agents=[intent_agent], tasks=[task_intent])
intent_result = intent_crew.run(user_prompt).strip().lower()

# Step 2: Route based on intent
if intent_result == "metadata":
    crew = Crew(
        agents=[agent_metadata],
        tasks=[task_metadata]
    )
elif intent_result == "technical":
    crew = Crew(
        agents=[agent_technical],
        tasks=[task_technical]
    )
elif intent_result == "both":
    crew = Crew(
        agents=[agent_metadata, agent_technical, agent_summarizer],
        tasks=[task_metadata, task_technical, task_summary]
    )
elif intent_result == "code":
    # First run technical task to extract data
    technical_crew = Crew(agents=[agent_technical], tasks=[task_technical])
    tech_output = technical_crew.run(user_prompt)

    # Then pass to software engineer
    task_code = Task(
        description=(
            f"Using the following technical details:\n{tech_output}\n\n"
            "Generate appropriate code in Python or Java as requested by the user."
        ),
        agent=software_engineer_agent,
        expected_output="Generated code with explanation."
    )

    crew = Crew(
        agents=[software_engineer_agent],
        tasks=[task_code]
    )
else:
    raise ValueError("Unknown intent type detected!")

# Step 3: Run final crew based on routing
final_output = crew.run(user_prompt)
print(final_output)


---

✅  Summary

Intent	Agents Involved	Output

metadata	agent_metadata	Metadata details only
technical	agent_technical	Technical analysis only
both	agent_metadata, agent_technical, agent_summarizer	Combined report
code	agent_technical, software_engineer_agent	Generated code using tech details



---

Would you like a fully working Python script template with mocks for tools

and test prompts?


from crewai import Agent, Task, Crew

Placeholder tools for vector search

class EudaMetadataVectorSearchTool: def run(self, query): return f"[Metadata] Found metadata for: {query}"

class EudaTechnicalVectorSearchTool: def run(self, query): return f"[Technical] Found technical details for: {query}"

Initialize tools

search_metadata_tool = EudaMetadataVectorSearchTool() search_technical_tool = EudaTechnicalVectorSearchTool()

Define Agents

intent_agent = Agent( role="Intent Classifier", goal="Classify user query into metadata, technical, both, or code", backstory="Expert at detecting user intent in natural language.", tools=[], allow_delegation=False )

agent_metadata = Agent( role="EUDA Metadata Expert", goal="Retrieve business metadata for given EUDA", tools=[search_metadata_tool], allow_delegation=False )

agent_technical = Agent( role="EUDA Technical Analyst", goal="Retrieve technical details for given EUDA", tools=[search_technical_tool], allow_delegation=False )

agent_summarizer = Agent( role="EUDA Summarizer", goal="Summarize metadata and technical information", tools=[], allow_delegation=False )

software_engineer_agent = Agent( role="Software Engineer", goal="Generate Python/Java code based on technical EUDA details", tools=[], allow_delegation=False )

Define Tasks

task_intent = Task( description=( "Classify the user query into one of the following: 'metadata', 'technical', 'both', or 'code'." " Respond with only the label." ), agent=intent_agent, expected_output="One of: metadata, technical, both, code" )

def create_task_metadata(user_prompt): return Task( description=f"Find metadata details for EUDA named '{user_prompt}'", agent=agent_metadata, expected_output="Business metadata for the EUDA" )

def create_task_technical(user_prompt): return Task( description=f"Find technical details (macros, formulas) for EUDA named '{user_prompt}'", agent=agent_technical, expected_output="Technical details for the EUDA" )

def create_task_summary(): return Task( description="Summarize combined metadata and technical analysis into a single report", agent=agent_summarizer, expected_output="Summary report of metadata and technical information" )

def create_task_code(tech_output, user_prompt): return Task( description=( f"Based on the following technical details: {tech_output}, generate code in Python or Java as per the request: {user_prompt}" ), agent=software_engineer_agent, expected_output="Generated code and explanation" )

Execution logic

def run_euda_analysis(user_prompt): # Step 1: Detect Intent intent_crew = Crew(agents=[intent_agent], tasks=[task_intent]) intent_result = intent_crew.run(user_prompt).strip().lower() print(f"Detected intent: {intent_result}")

# Step 2: Route
if intent_result == "metadata":
    task_meta = create_task_metadata(user_prompt)
    crew = Crew(agents=[agent_metadata], tasks=[task_meta])
elif intent_result == "technical":
    task_tech = create_task_technical(user_prompt)
    crew = Crew(agents=[agent_technical], tasks=[task_tech])
elif intent_result == "both":
    task_meta = create_task_metadata(user_prompt)
    task_tech = create_task_technical(user_prompt)
    task_sum = create_task_summary()
    crew = Crew(agents=[agent_metadata, agent_technical, agent_summarizer], tasks=[task_meta, task_tech, task_sum])
elif intent_result == "code":
    # First get technical output
    tech_task = create_task_technical(user_prompt)
    tech_crew = Crew(agents=[agent_technical], tasks=[tech_task])
    tech_output = tech_crew.run(user_prompt)

    # Now code task
    task_code = create_task_code(tech_output, user_prompt)
    crew = Crew(agents=[software_engineer_agent], tasks=[task_code])
else:
    raise ValueError("Invalid intent classification.")

# Step 3: Final Execution
result = crew.run(user_prompt)
return result

--- Example Run ---

if name == "main": prompt = "Generate a Python script to automate the calculations in EUDA 'Finance_Q2_Report'" output = run_euda_analysis(prompt) print("\nFinal Output:\n", output)





from crewai import Agent, Task, Crew

# Placeholder tools for vector search
class EudaMetadataVectorSearchTool:
    def run(self, query):
        return f"[Metadata] Found metadata for: {query}"

class EudaTechnicalVectorSearchTool:
    def run(self, query):
        return f"[Technical] Found technical details for: {query}"

# Initialize tools
search_metadata_tool = EudaMetadataVectorSearchTool()
search_technical_tool = EudaTechnicalVectorSearchTool()

# Define Agents
intent_agent = Agent(
    role="Intent Classifier",
    goal="Classify user query into metadata, technical, both, or code",
    backstory="Expert at detecting user intent in natural language.",
    tools=[],
    allow_delegation=False
)

agent_metadata = Agent(
    role="EUDA Metadata Expert",
    goal="Retrieve business metadata for given EUDA",
    tools=[search_metadata_tool],
    allow_delegation=False
)

agent_technical = Agent(
    role="EUDA Technical Analyst",
    goal="Retrieve technical details for given EUDA",
    tools=[search_technical_tool],
    allow_delegation=False
)

agent_summarizer = Agent(
    role="EUDA Summarizer",
    goal="Summarize metadata and technical information",
    tools=[],
    allow_delegation=False
)

software_engineer_agent = Agent(
    role="Software Engineer",
    goal="Generate Python/Java code based on technical EUDA details",
    tools=[],
    allow_delegation=False
)

# Define Tasks
task_intent = Task(
    description=(
        "Classify the user query into one of the following: 'metadata', 'technical', 'both', or 'code'."
        " Respond with only the label."
    ),
    agent=intent_agent,
    expected_output="One of: metadata, technical, both, code"
)

def create_task_metadata(user_prompt):
    return Task(
        description=f"Find metadata details for EUDA named '{user_prompt}'",
        agent=agent_metadata,
        expected_output="Business metadata for the EUDA"
    )

def create_task_technical(user_prompt):
    return Task(
        description=f"Find technical details (macros, formulas) for EUDA named '{user_prompt}'",
        agent=agent_technical,
        expected_output="Technical details for the EUDA"
    )

def create_task_summary():
    return Task(
        description="Summarize combined metadata and technical analysis into a single report",
        agent=agent_summarizer,
        expected_output="Summary report of metadata and technical information"
    )

def create_task_code(tech_output, user_prompt):
    return Task(
        description=(
            f"Based on the following technical details: {tech_output}, generate code in Python or Java as per the request: {user_prompt}"
        ),
        agent=software_engineer_agent,
        expected_output="Generated code and explanation"
    )

# Execution logic
def run_euda_analysis(user_prompt):
    # Step 1: Detect Intent
    intent_crew = Crew(agents=[intent_agent], tasks=[task_intent])
    intent_result = intent_crew.run(user_prompt).strip().lower()
    print(f"Detected intent: {intent_result}")

    # Step 2: Route
    if intent_result == "metadata":
        task_meta = create_task_metadata(user_prompt)
        crew = Crew(agents=[agent_metadata], tasks=[task_meta])
    elif intent_result == "technical":
        task_tech = create_task_technical(user_prompt)
        crew = Crew(agents=[agent_technical], tasks=[task_tech])
    elif intent_result == "both":
        task_meta = create_task_metadata(user_prompt)
        task_tech = create_task_technical(user_prompt)
        task_sum = create_task_summary()
        crew = Crew(agents=[agent_metadata, agent_technical, agent_summarizer], tasks=[task_meta, task_tech, task_sum])
    elif intent_result == "code":
        # First get technical output
        tech_task = create_task_technical(user_prompt)
        tech_crew = Crew(agents=[agent_technical], tasks=[tech_task])
        tech_output = tech_crew.run(user_prompt)

        # Now code task
        task_code = create_task_code(tech_output, user_prompt)
        crew = Crew(agents=[software_engineer_agent], tasks=[task_code])
    else:
        raise ValueError("Invalid intent classification.")

    # Step 3: Final Execution
    result = crew.run(user_prompt)
    return result

# --- Example Run ---
if __name__ == "__main__":
    prompt = "Generate a Python script to automate the calculations in EUDA 'Finance_Q2_Report'"
    output = run_euda_analysis(prompt)
    print("\nFinal Output:\n", output)


✅ The complete working Python script to route EUDA-related tasks dynamically via CrewAI is now ready. It includes:

Intent classification

Conditional task execution

Technical + metadata analysis

Code generation based on EUDA structure


You can find and customize it in the code file titled “Euda Agent Router” in the right-hand panel.

Let me know if you'd like:

Keyword-based or LLM-based intent classification enhancement

Integration with actual vector DB (like PostgreSQL/Chroma)

LangChain-based tools or OpenAI Function-calling integration


Would you like a Streamlit UI wrapper for this too?



